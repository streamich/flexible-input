"use strict";(self.webpackChunkflexible_input=self.webpackChunkflexible_input||[]).push([[141],{"./src/index.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{ExtraWidth:()=>ExtraWidth,Interactive:()=>Interactive,MaxWidth:()=>MaxWidth,MinWidth:()=>MinWidth,Multiline:()=>Multiline,Primary:()=>Primary,__namedExportsOrder:()=>__namedExportsOrder,default:()=>index_stories});var react=__webpack_require__("./node_modules/react/index.js"),lib=__webpack_require__("./node_modules/nano-theme/lib/index.js");var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");const blockClass=(0,lib.rule)({d:"inline-block",pos:"relative"}),inputClass=(0,lib.rule)({d:"inline-block",va:"bottom",bxz:"border-box",ov:"hidden",pd:0,mr:0,bd:0,bg:0,out:0,col:"inherit",fw:"inherit",f:"inherit",lh:"inherit",ws:"pre",resize:"none"}),sizerClass=(0,lib.rule)({d:"inline-block",pos:"absolute",ov:"hidden",pe:"none",us:"none",bxz:"border-box",t:0,l:0,ws:"pre"}),FlexibleInput=_ref=>{let{inp,value,uncontrolled,multiline,typebefore="",typeahead="",extraWidth,minWidth=8,maxWidth,focus,onChange,onFocus,onBlur,onKeyDown,onSubmit,onCancel,onTab}=_ref;const inputRef=react.useRef(null),sizerRef=react.useRef(null),theme=(0,lib.useTheme)();react.useLayoutEffect((()=>{inputRef.current&&sizerRef.current&&(focus&&inputRef.current.focus(),((from,to,which)=>{const styles=window.getComputedStyle(from);if(styles)for(const property of which)to.style[property]=styles[property]})(inputRef.current,sizerRef.current,["font","fontSize","fontFamily","fontWeight","fontStyle","letterSpacing","textTransform","boxSizing"]))}),[]),react.useLayoutEffect((()=>{const input=inputRef.current,sizer=sizerRef.current;if(!input||!sizer)return;let width=sizer.scrollWidth;extraWidth&&(width+=extraWidth),minWidth&&(width=Math.max(width,minWidth)),maxWidth&&(width=Math.min(width,maxWidth));const style=input.style;if(style.width=width+"px",multiline){const height=sizer.scrollHeight;style.height=height+"px"}}),[value,typeahead,extraWidth]);const attr={ref:input=>{inputRef.current=input,inp&&inp(input)},className:inputClass,onChange,onFocus,onBlur,onKeyDown:e=>{"Enter"!==e.key||multiline&&!e.ctrlKey?"Escape"===e.key?onCancel&&onCancel(e):"Tab"===e.key&&onTab&&onTab(e):onSubmit&&onSubmit(e),onKeyDown&&onKeyDown(e)}},input=multiline?(0,jsx_runtime.jsx)("textarea",{...attr,value:uncontrolled?void 0:value}):(0,jsx_runtime.jsx)("input",{...attr,value:uncontrolled?void 0:value});return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[!!typebefore&&(0,jsx_runtime.jsx)("span",{style:{color:theme.g(.7),verticalAlign:"top"},children:typebefore}),(0,jsx_runtime.jsxs)("span",{className:blockClass,children:[input,(0,jsx_runtime.jsxs)("span",{ref:sizerRef,className:sizerClass,children:[(0,jsx_runtime.jsx)("span",{style:{visibility:"hidden"},children:value}),"â€‹",!!typeahead&&(0,jsx_runtime.jsx)("span",{style:{color:theme.g(.7)},children:typeahead})]})]})]})};try{FlexibleInput.displayName="FlexibleInput",FlexibleInput.__docgenInfo={description:"",displayName:"FlexibleInput",props:{inp:{defaultValue:null,description:"Ref to the input element.",name:"inp",required:!1,type:{name:"((el: HTMLInputElement | HTMLTextAreaElement | null) => void)"}},value:{defaultValue:null,description:"Value to display.",name:"value",required:!1,type:{name:"string"}},uncontrolled:{defaultValue:null,description:"Whether the value is controlled.",name:"uncontrolled",required:!1,type:{name:"boolean"}},multiline:{defaultValue:null,description:"Whether the input is multiline.",name:"multiline",required:!1,type:{name:"boolean"}},typebefore:{defaultValue:{value:""},description:"Placeholder to display.",name:"typebefore",required:!1,type:{name:"string"}},typeahead:{defaultValue:{value:""},description:"Typeahead string to add to the value. It is visible at half opacity.",name:"typeahead",required:!1,type:{name:"string"}},extraWidth:{defaultValue:null,description:"Addition width to add, for example, to account for number stepper.",name:"extraWidth",required:!1,type:{name:"number"}},minWidth:{defaultValue:{value:"8"},description:"Minimum width to allow.",name:"minWidth",required:!1,type:{name:"number"}},maxWidth:{defaultValue:null,description:"Maximum width to allow.",name:"maxWidth",required:!1,type:{name:"number"}},focus:{defaultValue:null,description:"Whether the input is focused on initial render.",name:"focus",required:!1,type:{name:"boolean"}},onChange:{defaultValue:null,description:"Callback for when the value changes.",name:"onChange",required:!1,type:{name:"ChangeEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onFocus:{defaultValue:null,description:"Callback for when the input is focused.",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onBlur:{defaultValue:null,description:"Callback for when the input is blurred.",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyDown:{defaultValue:null,description:"Callback for when a key is pressed.",name:"onKeyDown",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onSubmit:{defaultValue:null,description:"Callback for when the Enter key is pressed.",name:"onSubmit",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onCancel:{defaultValue:null,description:"Callback for when the Escape key is pressed.",name:"onCancel",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onTab:{defaultValue:null,description:"Callback for when the Tab key is pressed.",name:"onTab",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/index.tsx#FlexibleInput"]={docgenInfo:FlexibleInput.__docgenInfo,name:"FlexibleInput",path:"src/index.tsx#FlexibleInput"})}catch(__react_docgen_typescript_loader_error){}const index_stories={title:"FlexibleInput",component:FlexibleInput,parameters:{layout:"centered"},tags:["autodocs"],argTypes:{}},Primary={args:{value:"Typ",typeahead:"e something here"}},InteractiveDemo=_ref=>{let{noDemoDebug,...props}=_ref;const[value,setValue]=react.useState("Hello World");return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)("div",{style:{border:"1px solid #bbb",borderRadius:4,display:"inline-block",padding:"4px 8px"},children:(0,jsx_runtime.jsx)(FlexibleInput,{...props,value,typeahead:props.typeahead||("n"===value?"ull":"f"===value?"alse":""),onChange:e=>setValue(e.target.value)})}),!noDemoDebug&&(0,jsx_runtime.jsxs)("div",{children:["Value: ",value]})]})};InteractiveDemo.displayName="InteractiveDemo";const Interactive={args:{},render:()=>(0,jsx_runtime.jsx)(InteractiveDemo,{})},Multiline={args:{},render:()=>(0,jsx_runtime.jsx)(InteractiveDemo,{multiline:!0,noDemoDebug:!0})},MinWidth={args:{},render:()=>(0,jsx_runtime.jsx)(InteractiveDemo,{minWidth:200})},MaxWidth={args:{},render:()=>(0,jsx_runtime.jsx)(InteractiveDemo,{maxWidth:200})},ExtraWidth={args:{},render:()=>(0,jsx_runtime.jsx)(InteractiveDemo,{extraWidth:100})};Primary.parameters={...Primary.parameters,docs:{...Primary.parameters?.docs,source:{originalSource:"{\n  args: ({\n    value: 'Typ',\n    typeahead: 'e something here'\n  } as any)\n}",...Primary.parameters?.docs?.source}}},Interactive.parameters={...Interactive.parameters,docs:{...Interactive.parameters?.docs,source:{originalSource:"{\n  args: {},\n  render: () => <InteractiveDemo />\n}",...Interactive.parameters?.docs?.source}}},Multiline.parameters={...Multiline.parameters,docs:{...Multiline.parameters?.docs,source:{originalSource:"{\n  args: {},\n  render: () => <InteractiveDemo multiline noDemoDebug />\n}",...Multiline.parameters?.docs?.source}}},MinWidth.parameters={...MinWidth.parameters,docs:{...MinWidth.parameters?.docs,source:{originalSource:"{\n  args: {},\n  render: () => <InteractiveDemo minWidth={200} />\n}",...MinWidth.parameters?.docs?.source}}},MaxWidth.parameters={...MaxWidth.parameters,docs:{...MaxWidth.parameters?.docs,source:{originalSource:"{\n  args: {},\n  render: () => <InteractiveDemo maxWidth={200} />\n}",...MaxWidth.parameters?.docs?.source}}},ExtraWidth.parameters={...ExtraWidth.parameters,docs:{...ExtraWidth.parameters?.docs,source:{originalSource:"{\n  args: {},\n  render: () => <InteractiveDemo extraWidth={100} />\n}",...ExtraWidth.parameters?.docs?.source}}};const __namedExportsOrder=["Primary","Interactive","Multiline","MinWidth","MaxWidth","ExtraWidth"]}}]);